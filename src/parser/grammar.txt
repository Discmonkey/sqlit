#### sqlit grammar


// main entry point
query:
    SELECT <columns> (<from>)? (<where>)? (<group by>)? (<order by>)? (<into>)? (<limit>)?

columns:
    <expression> (, <expression>)*

expression:
    <equality>

equality:
    <comparison> ( "!=" | "==" <comparison> )*

comparison:
    <term> ( ">" | ">=" | "<" | "<=" <term> )*

qualified_identifier:
    identifier ("." identifier)?

term:
    <factor> ("-" | "+" factor )*

factor:
    <unary> ("/" | "*" <unary> )*

unary:
    "!" | "-" <unary> | <primary>

// technically a <query> in a primary expression can only represent a single value such as, SELECT max(a) FROM table, however this restriction is difficult to express in the grammar:
primary:
    literal | <primary_value> | "(" expression | query ")"

primary_identifier:
    qualified_identifier ("(" expression | query ")")?

from:
    FROM <from_statement> (LEFT JOIN | INNER JOIN <from_statement> on <expression>

from_statement:
    '(' query ')' identifier | identifier

where:
    WHERE <expression>

group by:
    GROUP BY qualified_identifier (, qualified_identifier)*

order by:
    ORDER BY <order_by_statement>

order_by_statement:
    qualified_identifier (ASC | DESC)?

into:
    INTO <target>

target:
    file'(' string ')' | identifier

limit:
    LIMIT literal
